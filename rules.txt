Program -> Declaration-list $
Declaration-list -> Declaration Declaration-list | EPSILON 
Declaration -> Declaration-initial Declaration-prime
Declaration-initial -> #push_type Type-specifier #declare_id ID
Declaration-prime -> Fun-declaration-prime | #check_not_void Var-declaration-prime
Var-declaration-prime -> ; | [ #push_num NUM ] #declare_array ;
Fun-declaration-prime -> ( Params ) Compound-stmt
Type-specifier -> int | void
Params -> int #id ID Param-prime Param-list | void
Param-list -> , #add_param Param Param-list | EPSILON #add_param
Param -> Declaration-initial Param-prime
Param-prime -> [ ] | EPSILON
Compound-stmt -> { #add_scope Declaration-list Statement-list } #end_scope
Statement-list -> Statement Statement-list | EPSILON
Statement -> Expression-stmt | Compound-stmt | Selection-stmt | Iteration-stmt | Return-stmt
Expression-stmt -> Expression ; | #break_check break ; | ;
Selection-stmt -> if ( Expression ) #save Statement else #jpf_save Statement #jp
Iteration-stmt -> repeat #label Statement until ( Expression ) #until
Return-stmt -> return Return-stmt-prime
Return-stmt-prime -> ; | Expression ;
Expression -> Simple-expression-zegond | #id ID B
B -> = Expression #assign | [ Expression ] #array_calc H | Simple-expression-prime
H -> = Expression #assign | G D C
Simple-expression-zegond -> Additive-expression-zegond C
Simple-expression-prime -> Additive-expression-prime C
C -> #push_op Relop Additive-expression #do_op | EPSILON
Relop -> < | ==
Additive-expression -> Term D
Additive-expression-prime -> Term-prime D
Additive-expression-zegond -> Term-zegond D
D -> #push_op Addop Term #do_op D | EPSILON
Addop -> + | -
Term -> Factor G
Term-prime -> Factor-prime G
Term-zegond -> Factor-zegond G
G -> * Factor #mult G | EPSILON
Factor -> ( Expression ) | #id ID Var-call-prime | #push_num NUM
Var-call-prime -> ( #counter Args #end_func #print ) | Var-prime
Var-prime -> [ Expression ] #array_calc | EPSILON
Factor-prime -> ( #counter Args #end_func #print ) | EPSILON
Factor-zegond -> ( Expression ) | #push_num NUM
Args -> Arg-list | EPSILON
Arg-list -> Expression Arg-list-prime
Arg-list-prime -> , #counter_up Expression Arg-list-prime | EPSILON #counter_up
# write functions for action symbols
                # management stack and ...
                # semantic
# change symbol table generated by scanner in the SymbolTable class
# parse change to call semantic analyzer and code generator
# create output file
'''
1    assign
1    declare_id
1    declare_array
2    do_op
2    mult
2    push_op
1    label
1    until
2    array_calc
2    jpf_save
2    save
2    jp
1    print
1    push_num
2    id
    add_scope ***
    counter ***
    counter_up ***
    break_check ***
    end_scope ***
    check_not_void ***
    end_func ***
    add_param ***
'''

from symbol_table import SymbolTable


class code_generator:

    def __init__(self, symbol_table):
        self.symbol_table = SymbolTable()
        self.semantic_stack = []
        self.PB = []
        self.PC = 0
        self.scope_stack = []
        

    def code_gen(self, action_symbol, token):
        if action_symbol == "declare_id":
            self.declare_id(token)
        elif action_symbol == "declare_array":
            pass









    def declare_id(self, token):
        # search in symbol table
        # if found in current scope raise error
        # if not found
        # add to symbol table
        if self.symbol_table.lookup(token, self.scope_stack[-1]) != None:
            raise Exception("variable already declared")
        else:
            self.symbol_table.insert(token)

    def declare_array(self, token):
        # search in symbol table
        # if found in current scope raise error
        # if not found
        # add to symbol table
        pass

    def assign(self):

# write functions for action symbols
                # management stack and ...
                # semantic
# change symbol table generated by scanner in the SymbolTable class
# parse change to call semantic analyzer and code generator
# create output file


class code_generator:

    def __init__(self, symbol_table):
        self.symbol_table = symbol_table
        self.semantic_stack = []
        self.PB = []
        self.PC = 0
        self.scope_stack = []
        

    def code_gen(self, action_symbol, token):
        if action_symbol == "declare_id":
            self.declare_id(token)
        elif action_symbol == "declare_array":
            pass









    def declare_id(self, token):
        # search in symbol table
        # if found in current scope raise error
        # if not found
        # add to symbol table
        pass